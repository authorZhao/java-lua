// Generated by jextract

package com.git.lua;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct lua_Debug {
 *     int event;
 *     const char *name;
 *     const char *namewhat;
 *     const char *what;
 *     const char *source;
 *     size_t srclen;
 *     int currentline;
 *     int linedefined;
 *     int lastlinedefined;
 *     unsigned char nups;
 *     unsigned char nparams;
 *     char isvararg;
 *     char istailcall;
 *     unsigned short ftransfer;
 *     unsigned short ntransfer;
 *     char short_src[60];
 *     struct CallInfo *i_ci;
 * }
 * }
 */
public class lua_Debug {

    lua_Debug() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        luahpp_h.C_INT.withName("event"),
        MemoryLayout.paddingLayout(4),
        luahpp_h.C_POINTER.withName("name"),
        luahpp_h.C_POINTER.withName("namewhat"),
        luahpp_h.C_POINTER.withName("what"),
        luahpp_h.C_POINTER.withName("source"),
        luahpp_h.C_LONG_LONG.withName("srclen"),
        luahpp_h.C_INT.withName("currentline"),
        luahpp_h.C_INT.withName("linedefined"),
        luahpp_h.C_INT.withName("lastlinedefined"),
        luahpp_h.C_CHAR.withName("nups"),
        luahpp_h.C_CHAR.withName("nparams"),
        luahpp_h.C_CHAR.withName("isvararg"),
        luahpp_h.C_CHAR.withName("istailcall"),
        luahpp_h.C_SHORT.withName("ftransfer"),
        luahpp_h.C_SHORT.withName("ntransfer"),
        MemoryLayout.sequenceLayout(60, luahpp_h.C_CHAR).withName("short_src"),
        luahpp_h.C_POINTER.withName("i_ci")
    ).withName("lua_Debug");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt event$LAYOUT = (OfInt)$LAYOUT.select(groupElement("event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int event
     * }
     */
    public static final OfInt event$layout() {
        return event$LAYOUT;
    }

    private static final long event$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int event
     * }
     */
    public static final long event$offset() {
        return event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int event
     * }
     */
    public static int event(MemorySegment struct) {
        return struct.get(event$LAYOUT, event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int event
     * }
     */
    public static void event(MemorySegment struct, int fieldValue) {
        struct.set(event$LAYOUT, event$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout namewhat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("namewhat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *namewhat
     * }
     */
    public static final AddressLayout namewhat$layout() {
        return namewhat$LAYOUT;
    }

    private static final long namewhat$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *namewhat
     * }
     */
    public static final long namewhat$offset() {
        return namewhat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *namewhat
     * }
     */
    public static MemorySegment namewhat(MemorySegment struct) {
        return struct.get(namewhat$LAYOUT, namewhat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *namewhat
     * }
     */
    public static void namewhat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(namewhat$LAYOUT, namewhat$OFFSET, fieldValue);
    }

    private static final AddressLayout what$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("what"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *what
     * }
     */
    public static final AddressLayout what$layout() {
        return what$LAYOUT;
    }

    private static final long what$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *what
     * }
     */
    public static final long what$offset() {
        return what$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *what
     * }
     */
    public static MemorySegment what(MemorySegment struct) {
        return struct.get(what$LAYOUT, what$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *what
     * }
     */
    public static void what(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(what$LAYOUT, what$OFFSET, fieldValue);
    }

    private static final AddressLayout source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *source
     * }
     */
    public static final AddressLayout source$layout() {
        return source$LAYOUT;
    }

    private static final long source$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *source
     * }
     */
    public static final long source$offset() {
        return source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *source
     * }
     */
    public static MemorySegment source(MemorySegment struct) {
        return struct.get(source$LAYOUT, source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *source
     * }
     */
    public static void source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(source$LAYOUT, source$OFFSET, fieldValue);
    }

    private static final OfLong srclen$LAYOUT = (OfLong)$LAYOUT.select(groupElement("srclen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t srclen
     * }
     */
    public static final OfLong srclen$layout() {
        return srclen$LAYOUT;
    }

    private static final long srclen$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t srclen
     * }
     */
    public static final long srclen$offset() {
        return srclen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t srclen
     * }
     */
    public static long srclen(MemorySegment struct) {
        return struct.get(srclen$LAYOUT, srclen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t srclen
     * }
     */
    public static void srclen(MemorySegment struct, long fieldValue) {
        struct.set(srclen$LAYOUT, srclen$OFFSET, fieldValue);
    }

    private static final OfInt currentline$LAYOUT = (OfInt)$LAYOUT.select(groupElement("currentline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int currentline
     * }
     */
    public static final OfInt currentline$layout() {
        return currentline$LAYOUT;
    }

    private static final long currentline$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int currentline
     * }
     */
    public static final long currentline$offset() {
        return currentline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int currentline
     * }
     */
    public static int currentline(MemorySegment struct) {
        return struct.get(currentline$LAYOUT, currentline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int currentline
     * }
     */
    public static void currentline(MemorySegment struct, int fieldValue) {
        struct.set(currentline$LAYOUT, currentline$OFFSET, fieldValue);
    }

    private static final OfInt linedefined$LAYOUT = (OfInt)$LAYOUT.select(groupElement("linedefined"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int linedefined
     * }
     */
    public static final OfInt linedefined$layout() {
        return linedefined$LAYOUT;
    }

    private static final long linedefined$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int linedefined
     * }
     */
    public static final long linedefined$offset() {
        return linedefined$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int linedefined
     * }
     */
    public static int linedefined(MemorySegment struct) {
        return struct.get(linedefined$LAYOUT, linedefined$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int linedefined
     * }
     */
    public static void linedefined(MemorySegment struct, int fieldValue) {
        struct.set(linedefined$LAYOUT, linedefined$OFFSET, fieldValue);
    }

    private static final OfInt lastlinedefined$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lastlinedefined"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int lastlinedefined
     * }
     */
    public static final OfInt lastlinedefined$layout() {
        return lastlinedefined$LAYOUT;
    }

    private static final long lastlinedefined$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int lastlinedefined
     * }
     */
    public static final long lastlinedefined$offset() {
        return lastlinedefined$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int lastlinedefined
     * }
     */
    public static int lastlinedefined(MemorySegment struct) {
        return struct.get(lastlinedefined$LAYOUT, lastlinedefined$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int lastlinedefined
     * }
     */
    public static void lastlinedefined(MemorySegment struct, int fieldValue) {
        struct.set(lastlinedefined$LAYOUT, lastlinedefined$OFFSET, fieldValue);
    }

    private static final OfByte nups$LAYOUT = (OfByte)$LAYOUT.select(groupElement("nups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char nups
     * }
     */
    public static final OfByte nups$layout() {
        return nups$LAYOUT;
    }

    private static final long nups$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char nups
     * }
     */
    public static final long nups$offset() {
        return nups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char nups
     * }
     */
    public static byte nups(MemorySegment struct) {
        return struct.get(nups$LAYOUT, nups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char nups
     * }
     */
    public static void nups(MemorySegment struct, byte fieldValue) {
        struct.set(nups$LAYOUT, nups$OFFSET, fieldValue);
    }

    private static final OfByte nparams$LAYOUT = (OfByte)$LAYOUT.select(groupElement("nparams"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char nparams
     * }
     */
    public static final OfByte nparams$layout() {
        return nparams$LAYOUT;
    }

    private static final long nparams$OFFSET = 61;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char nparams
     * }
     */
    public static final long nparams$offset() {
        return nparams$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char nparams
     * }
     */
    public static byte nparams(MemorySegment struct) {
        return struct.get(nparams$LAYOUT, nparams$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char nparams
     * }
     */
    public static void nparams(MemorySegment struct, byte fieldValue) {
        struct.set(nparams$LAYOUT, nparams$OFFSET, fieldValue);
    }

    private static final OfByte isvararg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("isvararg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char isvararg
     * }
     */
    public static final OfByte isvararg$layout() {
        return isvararg$LAYOUT;
    }

    private static final long isvararg$OFFSET = 62;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char isvararg
     * }
     */
    public static final long isvararg$offset() {
        return isvararg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char isvararg
     * }
     */
    public static byte isvararg(MemorySegment struct) {
        return struct.get(isvararg$LAYOUT, isvararg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char isvararg
     * }
     */
    public static void isvararg(MemorySegment struct, byte fieldValue) {
        struct.set(isvararg$LAYOUT, isvararg$OFFSET, fieldValue);
    }

    private static final OfByte istailcall$LAYOUT = (OfByte)$LAYOUT.select(groupElement("istailcall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char istailcall
     * }
     */
    public static final OfByte istailcall$layout() {
        return istailcall$LAYOUT;
    }

    private static final long istailcall$OFFSET = 63;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char istailcall
     * }
     */
    public static final long istailcall$offset() {
        return istailcall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char istailcall
     * }
     */
    public static byte istailcall(MemorySegment struct) {
        return struct.get(istailcall$LAYOUT, istailcall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char istailcall
     * }
     */
    public static void istailcall(MemorySegment struct, byte fieldValue) {
        struct.set(istailcall$LAYOUT, istailcall$OFFSET, fieldValue);
    }

    private static final OfShort ftransfer$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ftransfer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short ftransfer
     * }
     */
    public static final OfShort ftransfer$layout() {
        return ftransfer$LAYOUT;
    }

    private static final long ftransfer$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short ftransfer
     * }
     */
    public static final long ftransfer$offset() {
        return ftransfer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short ftransfer
     * }
     */
    public static short ftransfer(MemorySegment struct) {
        return struct.get(ftransfer$LAYOUT, ftransfer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short ftransfer
     * }
     */
    public static void ftransfer(MemorySegment struct, short fieldValue) {
        struct.set(ftransfer$LAYOUT, ftransfer$OFFSET, fieldValue);
    }

    private static final OfShort ntransfer$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ntransfer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short ntransfer
     * }
     */
    public static final OfShort ntransfer$layout() {
        return ntransfer$LAYOUT;
    }

    private static final long ntransfer$OFFSET = 66;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short ntransfer
     * }
     */
    public static final long ntransfer$offset() {
        return ntransfer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short ntransfer
     * }
     */
    public static short ntransfer(MemorySegment struct) {
        return struct.get(ntransfer$LAYOUT, ntransfer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short ntransfer
     * }
     */
    public static void ntransfer(MemorySegment struct, short fieldValue) {
        struct.set(ntransfer$LAYOUT, ntransfer$OFFSET, fieldValue);
    }

    private static final SequenceLayout short_src$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("short_src"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char short_src[60]
     * }
     */
    public static final SequenceLayout short_src$layout() {
        return short_src$LAYOUT;
    }

    private static final long short_src$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char short_src[60]
     * }
     */
    public static final long short_src$offset() {
        return short_src$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char short_src[60]
     * }
     */
    public static MemorySegment short_src(MemorySegment struct) {
        return struct.asSlice(short_src$OFFSET, short_src$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char short_src[60]
     * }
     */
    public static void short_src(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, short_src$OFFSET, short_src$LAYOUT.byteSize());
    }

    private static long[] short_src$DIMS = { 60 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char short_src[60]
     * }
     */
    public static long[] short_src$dimensions() {
        return short_src$DIMS;
    }
    private static final VarHandle short_src$ELEM_HANDLE = short_src$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char short_src[60]
     * }
     */
    public static byte short_src(MemorySegment struct, long index0) {
        return (byte)short_src$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char short_src[60]
     * }
     */
    public static void short_src(MemorySegment struct, long index0, byte fieldValue) {
        short_src$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout i_ci$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("i_ci"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CallInfo *i_ci
     * }
     */
    public static final AddressLayout i_ci$layout() {
        return i_ci$LAYOUT;
    }

    private static final long i_ci$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CallInfo *i_ci
     * }
     */
    public static final long i_ci$offset() {
        return i_ci$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CallInfo *i_ci
     * }
     */
    public static MemorySegment i_ci(MemorySegment struct) {
        return struct.get(i_ci$LAYOUT, i_ci$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CallInfo *i_ci
     * }
     */
    public static void i_ci(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(i_ci$LAYOUT, i_ci$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

