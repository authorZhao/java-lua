// Generated by jextract

package com.git.lua;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;
import static com.git.lua.LuaLib.SYMBOL_LOOKUP;
public class luaconf_h {

    luaconf_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int _VCRT_COMPILER_PREPROCESSOR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _VCRT_COMPILER_PREPROCESSOR 1
     * }
     */
    public static int _VCRT_COMPILER_PREPROCESSOR() {
        return _VCRT_COMPILER_PREPROCESSOR;
    }
    private static final int _SAL_VERSION = (int)20L;
    /**
     * {@snippet lang=c :
     * #define _SAL_VERSION 20
     * }
     */
    public static int _SAL_VERSION() {
        return _SAL_VERSION;
    }
    private static final int __SAL_H_VERSION = (int)180000000L;
    /**
     * {@snippet lang=c :
     * #define __SAL_H_VERSION 180000000
     * }
     */
    public static int __SAL_H_VERSION() {
        return __SAL_H_VERSION;
    }
    private static final int _USE_DECLSPECS_FOR_SAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _USE_DECLSPECS_FOR_SAL 0
     * }
     */
    public static int _USE_DECLSPECS_FOR_SAL() {
        return _USE_DECLSPECS_FOR_SAL;
    }
    private static final int _USE_ATTRIBUTES_FOR_SAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _USE_ATTRIBUTES_FOR_SAL 0
     * }
     */
    public static int _USE_ATTRIBUTES_FOR_SAL() {
        return _USE_ATTRIBUTES_FOR_SAL;
    }
    private static final int _CRT_PACKING = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _CRT_PACKING 8
     * }
     */
    public static int _CRT_PACKING() {
        return _CRT_PACKING;
    }
    private static final int _HAS_EXCEPTIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _HAS_EXCEPTIONS 1
     * }
     */
    public static int _HAS_EXCEPTIONS() {
        return _HAS_EXCEPTIONS;
    }
    private static final int _HAS_CXX17 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _HAS_CXX17 0
     * }
     */
    public static int _HAS_CXX17() {
        return _HAS_CXX17;
    }
    private static final int _HAS_CXX20 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _HAS_CXX20 0
     * }
     */
    public static int _HAS_CXX20() {
        return _HAS_CXX20;
    }
    private static final int _HAS_NODISCARD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _HAS_NODISCARD 0
     * }
     */
    public static int _HAS_NODISCARD() {
        return _HAS_NODISCARD;
    }
    private static final int CHAR_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return CHAR_BIT;
    }
    private static final int SCHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return SCHAR_MAX;
    }
    private static final int UCHAR_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return UCHAR_MAX;
    }
    private static final int MB_LEN_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * #define MB_LEN_MAX 5
     * }
     */
    public static int MB_LEN_MAX() {
        return MB_LEN_MAX;
    }
    private static final int SHRT_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return SHRT_MAX;
    }
    private static final int USHRT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return USHRT_MAX;
    }
    private static final int INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return INT_MAX;
    }
    private static final int LUA_INT_INT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LUA_INT_INT 1
     * }
     */
    public static int LUA_INT_INT() {
        return LUA_INT_INT;
    }
    private static final int LUA_INT_LONG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LUA_INT_LONG 2
     * }
     */
    public static int LUA_INT_LONG() {
        return LUA_INT_LONG;
    }
    private static final int LUA_INT_LONGLONG = (int)3L;
    /**
     * {@snippet lang=c :
     * #define LUA_INT_LONGLONG 3
     * }
     */
    public static int LUA_INT_LONGLONG() {
        return LUA_INT_LONGLONG;
    }
    private static final int LUA_FLOAT_FLOAT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LUA_FLOAT_FLOAT 1
     * }
     */
    public static int LUA_FLOAT_FLOAT() {
        return LUA_FLOAT_FLOAT;
    }
    private static final int LUA_FLOAT_DOUBLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LUA_FLOAT_DOUBLE 2
     * }
     */
    public static int LUA_FLOAT_DOUBLE() {
        return LUA_FLOAT_DOUBLE;
    }
    private static final int LUA_FLOAT_LONGDOUBLE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define LUA_FLOAT_LONGDOUBLE 3
     * }
     */
    public static int LUA_FLOAT_LONGDOUBLE() {
        return LUA_FLOAT_LONGDOUBLE;
    }
    private static final int LUA_32BITS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define LUA_32BITS 0
     * }
     */
    public static int LUA_32BITS() {
        return LUA_32BITS;
    }
    private static final int LUA_C89_NUMBERS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define LUA_C89_NUMBERS 0
     * }
     */
    public static int LUA_C89_NUMBERS() {
        return LUA_C89_NUMBERS;
    }
    private static final int LUAI_MAXSTACK = (int)1000000L;
    /**
     * {@snippet lang=c :
     * #define LUAI_MAXSTACK 1000000
     * }
     */
    public static int LUAI_MAXSTACK() {
        return LUAI_MAXSTACK;
    }
    private static final int LUA_IDSIZE = (int)60L;
    /**
     * {@snippet lang=c :
     * #define LUA_IDSIZE 60
     * }
     */
    public static int LUA_IDSIZE() {
        return LUA_IDSIZE;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = luaconf_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *va_list
     * }
     */
    public static final AddressLayout va_list = luaconf_h.C_POINTER;

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void __va_start(va_list *, ...)
     * }
     */
    public static class __va_start {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                luaconf_h.C_POINTER
            );
        private static final MemorySegment ADDR = luaconf_h.findOrThrow("__va_start");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __va_start(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void __va_start(va_list *, ...)
         * }
         */
        public static __va_start makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __va_start(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__va_start", x0, x1);
                }
                spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long long size_t
     * }
     */
    public static final OfLong size_t = luaconf_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = luaconf_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long intptr_t
     * }
     */
    public static final OfLong intptr_t = luaconf_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef _Bool __vcrt_bool
     * }
     */
    public static final OfBoolean __vcrt_bool = luaconf_h.C_BOOL;
    /**
     * {@snippet lang=c :
     * typedef unsigned short wchar_t
     * }
     */
    public static final OfShort wchar_t = luaconf_h.C_SHORT;

    private static class __security_init_cookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    luaconf_h.findOrThrow("__security_init_cookie"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __security_init_cookie()
     * }
     */
    public static FunctionDescriptor __security_init_cookie$descriptor() {
        return __security_init_cookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __security_init_cookie()
     * }
     */
    public static MethodHandle __security_init_cookie$handle() {
        return __security_init_cookie.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void __security_init_cookie()
     * }
     */
    public static void __security_init_cookie() {
        var mh$ = __security_init_cookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__security_init_cookie");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __security_check_cookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            luaconf_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    luaconf_h.findOrThrow("__security_check_cookie"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __security_check_cookie(uintptr_t _StackCookie)
     * }
     */
    public static FunctionDescriptor __security_check_cookie$descriptor() {
        return __security_check_cookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __security_check_cookie(uintptr_t _StackCookie)
     * }
     */
    public static MethodHandle __security_check_cookie$handle() {
        return __security_check_cookie.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void __security_check_cookie(uintptr_t _StackCookie)
     * }
     */
    public static void __security_check_cookie(long _StackCookie) {
        var mh$ = __security_check_cookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__security_check_cookie", _StackCookie);
            }
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __report_gsfailure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            luaconf_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    luaconf_h.findOrThrow("__report_gsfailure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __report_gsfailure(uintptr_t _StackCookie)
     * }
     */
    public static FunctionDescriptor __report_gsfailure$descriptor() {
        return __report_gsfailure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __report_gsfailure(uintptr_t _StackCookie)
     * }
     */
    public static MethodHandle __report_gsfailure$handle() {
        return __report_gsfailure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void __report_gsfailure(uintptr_t _StackCookie)
     * }
     */
    public static void __report_gsfailure(long _StackCookie) {
        var mh$ = __report_gsfailure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__report_gsfailure", _StackCookie);
            }
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __security_cookie$constants {
        public static final OfLong LAYOUT = luaconf_h.C_LONG_LONG;
        public static final MemorySegment SEGMENT = luaconf_h.findOrThrow("__security_cookie").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static OfLong __security_cookie$layout() {
        return __security_cookie$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static MemorySegment __security_cookie$segment() {
        return __security_cookie$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static long __security_cookie() {
        return __security_cookie$constants.SEGMENT.get(__security_cookie$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static void __security_cookie(long varValue) {
        __security_cookie$constants.SEGMENT.set(__security_cookie$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef double max_align_t
     * }
     */
    public static final OfDouble max_align_t = luaconf_h.C_DOUBLE;
    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int)4514L;
    /**
     * {@snippet lang=c :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final int LONG_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -2147483648
     * }
     */
    public static int LONG_MIN() {
        return LONG_MIN;
    }
    private static final int LONG_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 2147483647
     * }
     */
    public static int LONG_MAX() {
        return LONG_MAX;
    }
    private static final int ULONG_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX 4294967295
     * }
     */
    public static int ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int _I8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define _I8_MIN -128
     * }
     */
    public static int _I8_MIN() {
        return _I8_MIN;
    }
    private static final byte _I8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define _I8_MAX 127
     * }
     */
    public static byte _I8_MAX() {
        return _I8_MAX;
    }
    private static final byte _UI8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define _UI8_MAX 255
     * }
     */
    public static byte _UI8_MAX() {
        return _UI8_MAX;
    }
    private static final int _I16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define _I16_MIN -32768
     * }
     */
    public static int _I16_MIN() {
        return _I16_MIN;
    }
    private static final short _I16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define _I16_MAX 32767
     * }
     */
    public static short _I16_MAX() {
        return _I16_MAX;
    }
    private static final short _UI16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define _UI16_MAX 65535
     * }
     */
    public static short _UI16_MAX() {
        return _UI16_MAX;
    }
    private static final int _I32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define _I32_MIN -2147483648
     * }
     */
    public static int _I32_MIN() {
        return _I32_MIN;
    }
    private static final int _I32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define _I32_MAX 2147483647
     * }
     */
    public static int _I32_MAX() {
        return _I32_MAX;
    }
    private static final int _UI32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define _UI32_MAX 4294967295
     * }
     */
    public static int _UI32_MAX() {
        return _UI32_MAX;
    }
    private static final long _I64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define _I64_MIN -9223372036854775808
     * }
     */
    public static long _I64_MIN() {
        return _I64_MIN;
    }
    private static final long _I64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define _I64_MAX 9223372036854775807
     * }
     */
    public static long _I64_MAX() {
        return _I64_MAX;
    }
    private static final long _UI64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define _UI64_MAX -1
     * }
     */
    public static long _UI64_MAX() {
        return _UI64_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long LONG_LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_LONG_MAX() {
        return LONG_LONG_MAX;
    }
    private static final long LONG_LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_LONG_MIN() {
        return LONG_LONG_MIN;
    }
    private static final long ULONG_LONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_LONG_MAX -1
     * }
     */
    public static long ULONG_LONG_MAX() {
        return ULONG_LONG_MAX;
    }
    private static final int LUAI_IS32INT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LUAI_IS32INT 1
     * }
     */
    public static int LUAI_IS32INT() {
        return LUAI_IS32INT;
    }
    private static final int LUA_INT_DEFAULT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define LUA_INT_DEFAULT 3
     * }
     */
    public static int LUA_INT_DEFAULT() {
        return LUA_INT_DEFAULT;
    }
    private static final int LUA_FLOAT_DEFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LUA_FLOAT_DEFAULT 2
     * }
     */
    public static int LUA_FLOAT_DEFAULT() {
        return LUA_FLOAT_DEFAULT;
    }
    private static final int LUA_INT_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define LUA_INT_TYPE 3
     * }
     */
    public static int LUA_INT_TYPE() {
        return LUA_INT_TYPE;
    }
    private static final int LUA_FLOAT_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LUA_FLOAT_TYPE 2
     * }
     */
    public static int LUA_FLOAT_TYPE() {
        return LUA_FLOAT_TYPE;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_PATH_SEP ";"
     * }
     */
    public static MemorySegment LUA_PATH_SEP() {
        class Holder {
            static final MemorySegment LUA_PATH_SEP
                = luaconf_h.LIBRARY_ARENA.allocateFrom(";");
        }
        return Holder.LUA_PATH_SEP;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_PATH_MARK "?"
     * }
     */
    public static MemorySegment LUA_PATH_MARK() {
        class Holder {
            static final MemorySegment LUA_PATH_MARK
                = luaconf_h.LIBRARY_ARENA.allocateFrom("?");
        }
        return Holder.LUA_PATH_MARK;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_EXEC_DIR "!"
     * }
     */
    public static MemorySegment LUA_EXEC_DIR() {
        class Holder {
            static final MemorySegment LUA_EXEC_DIR
                = luaconf_h.LIBRARY_ARENA.allocateFrom("!");
        }
        return Holder.LUA_EXEC_DIR;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_LDIR "!\lua\"
     * }
     */
    public static MemorySegment LUA_LDIR() {
        class Holder {
            static final MemorySegment LUA_LDIR
                = luaconf_h.LIBRARY_ARENA.allocateFrom("!\\lua\\");
        }
        return Holder.LUA_LDIR;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_CDIR "!\"
     * }
     */
    public static MemorySegment LUA_CDIR() {
        class Holder {
            static final MemorySegment LUA_CDIR
                = luaconf_h.LIBRARY_ARENA.allocateFrom("!\\");
        }
        return Holder.LUA_CDIR;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_SHRDIR "!\..\share\lua\"
     * }
     */
    public static MemorySegment LUA_SHRDIR() {
        class Holder {
            static final MemorySegment LUA_SHRDIR
                = luaconf_h.LIBRARY_ARENA.allocateFrom("!\\..\\share\\lua\\");
        }
        return Holder.LUA_SHRDIR;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_PATH_DEFAULT "!\lua\?.lua;!\lua\?\init.lua;!\?.lua;!\?\init.lua;!\..\share\lua\"
     * }
     */
    public static MemorySegment LUA_PATH_DEFAULT() {
        class Holder {
            static final MemorySegment LUA_PATH_DEFAULT
                = luaconf_h.LIBRARY_ARENA.allocateFrom("!\\lua\\?.lua;!\\lua\\?\\init.lua;!\\?.lua;!\\?\\init.lua;!\\..\\share\\lua\\");
        }
        return Holder.LUA_PATH_DEFAULT;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_CPATH_DEFAULT "!\?.dll;!\..\lib\lua\"
     * }
     */
    public static MemorySegment LUA_CPATH_DEFAULT() {
        class Holder {
            static final MemorySegment LUA_CPATH_DEFAULT
                = luaconf_h.LIBRARY_ARENA.allocateFrom("!\\?.dll;!\\..\\lib\\lua\\");
        }
        return Holder.LUA_CPATH_DEFAULT;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_DIRSEP "\"
     * }
     */
    public static MemorySegment LUA_DIRSEP() {
        class Holder {
            static final MemorySegment LUA_DIRSEP
                = luaconf_h.LIBRARY_ARENA.allocateFrom("\\");
        }
        return Holder.LUA_DIRSEP;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_NUMBER_FRMLEN ""
     * }
     */
    public static MemorySegment LUA_NUMBER_FRMLEN() {
        class Holder {
            static final MemorySegment LUA_NUMBER_FRMLEN
                = luaconf_h.LIBRARY_ARENA.allocateFrom("");
        }
        return Holder.LUA_NUMBER_FRMLEN;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_NUMBER_FMT "%.14g"
     * }
     */
    public static MemorySegment LUA_NUMBER_FMT() {
        class Holder {
            static final MemorySegment LUA_NUMBER_FMT
                = luaconf_h.LIBRARY_ARENA.allocateFrom("%.14g");
        }
        return Holder.LUA_NUMBER_FMT;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_INTEGER_FMT "%lld"
     * }
     */
    public static MemorySegment LUA_INTEGER_FMT() {
        class Holder {
            static final MemorySegment LUA_INTEGER_FMT
                = luaconf_h.LIBRARY_ARENA.allocateFrom("%lld");
        }
        return Holder.LUA_INTEGER_FMT;
    }
    /**
     * {@snippet lang=c :
     * #define LUA_INTEGER_FRMLEN "ll"
     * }
     */
    public static MemorySegment LUA_INTEGER_FRMLEN() {
        class Holder {
            static final MemorySegment LUA_INTEGER_FRMLEN
                = luaconf_h.LIBRARY_ARENA.allocateFrom("ll");
        }
        return Holder.LUA_INTEGER_FRMLEN;
    }
    private static final long LUA_MAXINTEGER = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LUA_MAXINTEGER 9223372036854775807
     * }
     */
    public static long LUA_MAXINTEGER() {
        return LUA_MAXINTEGER;
    }
    private static final long LUA_MININTEGER = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LUA_MININTEGER -9223372036854775808
     * }
     */
    public static long LUA_MININTEGER() {
        return LUA_MININTEGER;
    }
    private static final long LUA_MAXUNSIGNED = -1L;
    /**
     * {@snippet lang=c :
     * #define LUA_MAXUNSIGNED -1
     * }
     */
    public static long LUA_MAXUNSIGNED() {
        return LUA_MAXUNSIGNED;
    }
    private static final long LUA_EXTRASPACE = 8L;
    /**
     * {@snippet lang=c :
     * #define LUA_EXTRASPACE 8
     * }
     */
    public static long LUA_EXTRASPACE() {
        return LUA_EXTRASPACE;
    }
}

