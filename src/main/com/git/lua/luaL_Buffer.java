// Generated by jextract

package com.git.lua;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct luaL_Buffer {
 *     char *b;
 *     size_t size;
 *     size_t n;
 *     lua_State *L;
 *     union {
 *         lua_Number n;
 *         double u;
 *         void *s;
 *         lua_Integer i;
 *         long l;
 *         char b[1024];
 *     } init;
 * }
 * }
 */
public class luaL_Buffer {

    luaL_Buffer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        luahpp_h.C_POINTER.withName("b"),
        luahpp_h.C_LONG_LONG.withName("size"),
        luahpp_h.C_LONG_LONG.withName("n"),
        luahpp_h.C_POINTER.withName("L"),
        luaL_Buffer.init.layout().withName("init")
    ).withName("luaL_Buffer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout b$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *b
     * }
     */
    public static final AddressLayout b$layout() {
        return b$LAYOUT;
    }

    private static final long b$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *b
     * }
     */
    public static final long b$offset() {
        return b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *b
     * }
     */
    public static MemorySegment b(MemorySegment struct) {
        return struct.get(b$LAYOUT, b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *b
     * }
     */
    public static void b(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(b$LAYOUT, b$OFFSET, fieldValue);
    }

    private static final OfLong size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size
     * }
     */
    public static final OfLong size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size
     * }
     */
    public static long size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size
     * }
     */
    public static void size(MemorySegment struct, long fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfLong n$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t n
     * }
     */
    public static final OfLong n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t n
     * }
     */
    public static long n(MemorySegment struct) {
        return struct.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t n
     * }
     */
    public static void n(MemorySegment struct, long fieldValue) {
        struct.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final AddressLayout L$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("L"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lua_State *L
     * }
     */
    public static final AddressLayout L$layout() {
        return L$LAYOUT;
    }

    private static final long L$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lua_State *L
     * }
     */
    public static final long L$offset() {
        return L$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lua_State *L
     * }
     */
    public static MemorySegment L(MemorySegment struct) {
        return struct.get(L$LAYOUT, L$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lua_State *L
     * }
     */
    public static void L(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(L$LAYOUT, L$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     lua_Number n;
     *     double u;
     *     void *s;
     *     lua_Integer i;
     *     long l;
     *     char b[1024];
     * }
     * }
     */
    public static class init {

        init() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            luahpp_h.C_DOUBLE.withName("n"),
            luahpp_h.C_DOUBLE.withName("u"),
            luahpp_h.C_POINTER.withName("s"),
            luahpp_h.C_LONG_LONG.withName("i"),
            luahpp_h.C_LONG.withName("l"),
            MemoryLayout.sequenceLayout(1024, luahpp_h.C_CHAR).withName("b")
        ).withName("$anon$196:3");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfDouble n$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("n"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * lua_Number n
         * }
         */
        public static final OfDouble n$layout() {
            return n$LAYOUT;
        }

        private static final long n$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * lua_Number n
         * }
         */
        public static final long n$offset() {
            return n$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * lua_Number n
         * }
         */
        public static double n(MemorySegment union) {
            return union.get(n$LAYOUT, n$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * lua_Number n
         * }
         */
        public static void n(MemorySegment union, double fieldValue) {
            union.set(n$LAYOUT, n$OFFSET, fieldValue);
        }

        private static final OfDouble u$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("u"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * double u
         * }
         */
        public static final OfDouble u$layout() {
            return u$LAYOUT;
        }

        private static final long u$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * double u
         * }
         */
        public static final long u$offset() {
            return u$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * double u
         * }
         */
        public static double u(MemorySegment union) {
            return union.get(u$LAYOUT, u$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * double u
         * }
         */
        public static void u(MemorySegment union, double fieldValue) {
            union.set(u$LAYOUT, u$OFFSET, fieldValue);
        }

        private static final AddressLayout s$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("s"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *s
         * }
         */
        public static final AddressLayout s$layout() {
            return s$LAYOUT;
        }

        private static final long s$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *s
         * }
         */
        public static final long s$offset() {
            return s$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *s
         * }
         */
        public static MemorySegment s(MemorySegment union) {
            return union.get(s$LAYOUT, s$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *s
         * }
         */
        public static void s(MemorySegment union, MemorySegment fieldValue) {
            union.set(s$LAYOUT, s$OFFSET, fieldValue);
        }

        private static final OfLong i$LAYOUT = (OfLong)$LAYOUT.select(groupElement("i"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * lua_Integer i
         * }
         */
        public static final OfLong i$layout() {
            return i$LAYOUT;
        }

        private static final long i$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * lua_Integer i
         * }
         */
        public static final long i$offset() {
            return i$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * lua_Integer i
         * }
         */
        public static long i(MemorySegment union) {
            return union.get(i$LAYOUT, i$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * lua_Integer i
         * }
         */
        public static void i(MemorySegment union, long fieldValue) {
            union.set(i$LAYOUT, i$OFFSET, fieldValue);
        }

        private static final OfInt l$LAYOUT = (OfInt)$LAYOUT.select(groupElement("l"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * long l
         * }
         */
        public static final OfInt l$layout() {
            return l$LAYOUT;
        }

        private static final long l$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * long l
         * }
         */
        public static final long l$offset() {
            return l$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * long l
         * }
         */
        public static int l(MemorySegment union) {
            return union.get(l$LAYOUT, l$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * long l
         * }
         */
        public static void l(MemorySegment union, int fieldValue) {
            union.set(l$LAYOUT, l$OFFSET, fieldValue);
        }

        private static final SequenceLayout b$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("b"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char b[1024]
         * }
         */
        public static final SequenceLayout b$layout() {
            return b$LAYOUT;
        }

        private static final long b$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char b[1024]
         * }
         */
        public static final long b$offset() {
            return b$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char b[1024]
         * }
         */
        public static MemorySegment b(MemorySegment union) {
            return union.asSlice(b$OFFSET, b$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char b[1024]
         * }
         */
        public static void b(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, b$OFFSET, b$LAYOUT.byteSize());
        }

        private static long[] b$DIMS = { 1024 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * char b[1024]
         * }
         */
        public static long[] b$dimensions() {
            return b$DIMS;
        }
        private static final VarHandle b$ELEM_HANDLE = b$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * char b[1024]
         * }
         */
        public static byte b(MemorySegment union, long index0) {
            return (byte)b$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * char b[1024]
         * }
         */
        public static void b(MemorySegment union, long index0, byte fieldValue) {
            b$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout init$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     lua_Number n;
     *     double u;
     *     void *s;
     *     lua_Integer i;
     *     long l;
     *     char b[1024];
     * } init
     * }
     */
    public static final GroupLayout init$layout() {
        return init$LAYOUT;
    }

    private static final long init$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     lua_Number n;
     *     double u;
     *     void *s;
     *     lua_Integer i;
     *     long l;
     *     char b[1024];
     * } init
     * }
     */
    public static final long init$offset() {
        return init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     lua_Number n;
     *     double u;
     *     void *s;
     *     lua_Integer i;
     *     long l;
     *     char b[1024];
     * } init
     * }
     */
    public static MemorySegment init(MemorySegment struct) {
        return struct.asSlice(init$OFFSET, init$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     lua_Number n;
     *     double u;
     *     void *s;
     *     lua_Integer i;
     *     long l;
     *     char b[1024];
     * } init
     * }
     */
    public static void init(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, init$OFFSET, init$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

